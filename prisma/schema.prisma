datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum VoteValue {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum GameplayClassification {
  FIRST_POSITIVE
  FIRST_NEGATIVE
  SECOND_POSITIVE
  SECOND_NEGATIVE
}

enum GameType {
  NCV
  WOF
}

enum GameClassification {
  MATERIALISTIC
  TACTICAL
  DYNAMIC
  POSITIONAL
  STRATEGIC
  FORTUNE
}

enum GameStatus {
  ACCEPTED
  DECLINED
  PENDING_REPLY
  UNDER_REVIEW
}

enum UserRole {
  TESTER
  MEMBER
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  role       UserRole  @default(MEMBER)
  likedPosts Post[]    @relation("UserLikedPosts")
  comments   Comment[]
  voices     Voice[]
  posts      Post[]    @relation("UserPosts")
}

model Post {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  likes        User[]       @relation("UserLikedPosts")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  gamerules    GameRule[]
  type         GameType
  status       GameStatus
  verdict      String?
  author       User         @relation("UserPosts", fields: [authorUserId], references: [id])
  authorUserId Int
  comments     Comment[]
  PostDetails  PostDetails?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  User      User     @relation(fields: [userId], references: [id])
  userId    Int

  Children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id Int?
}

model PostDetails {
  id                     Int                     @id @default(autoincrement())
  Post                   Post                    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId                 Int                     @unique
  notes                  String?
  voices                 Voice[]
  gameClassification     GameClassification?
  gameplayClassification GameplayClassification?
}

model Voice {
  id       Int         @id @default(autoincrement())
  value    VoteValue
  tester   User        @relation(fields: [testerId], references: [id])
  post     PostDetails @relation(fields: [postId], references: [id])
  testerId Int
  postId   Int

  @@unique([testerId, postId])
}

model RuleType {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  GameRule GameRule[]
}

model GameRule {
  id         Int      @id @default(autoincrement())
  Post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  ruleType   RuleType @relation(fields: [ruleTypeId], references: [id])
  ruleTypeId Int
  value      String?

  @@unique([postId, ruleTypeId])
}

// Passing | allowPassing | true
// Anonymous | anonymous | true
// Any Capture | anyCapture | true
// Atomic | atomic | true
// Bare Piece | barePieceLoses | true
// Blindfold | blindfold | true
// Regicide | captureTheKing | true
// Crazyhouse | crazyhouse | true
// Crazywan | crazywan | true
// DeadWall | deadWall | true
// Diplomacy | diplomacy | true
// Duck | duckChess | true
// Fatal | fatalCapture | true
// Fog | fogOfWar | true
// Points | gameOfPoints
// Ghost | ghostBoard | true
// Giveaway | giveaway | true
// KotH | koth | true или список координат типа f3,g5,h2,b8,b7
// N-check | nCheck | N или [N, N, N, N] ([3,7,5,5] группируется как 3-5-7)
// No Zombies | noDkw | true
// No EnP | noEnPassant | true
// No Opp Castling | oppositeSideCastling | true
// OxN | oppX | N
// Play for Mate | play4mate | true
// +N | pointsForMate | N
// =KDSD | promoteTo | список букв 
// Nth | promotionRank | N
// Seirawan | seirawanSetup | true
// Self Check | selfCheck | true
// Self Partner | selfPartner | true
// Semianon | semiAnonymous | true
// Setup | setup | N
// Sideways | sideways | true
// Stalemate ... | stalemate | Win or Lose
// Taboo | taboo | true
// Takeover | takeover | true
// Alt Teams (RB or RG) |  teammate | 1 or 3
// Torpedo | torpedo | true
