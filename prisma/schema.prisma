datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum VoteValue {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum GameplayClassification {
  FIRST_POSITIVE
  FIRST_NEGATIVE
  SECOND_POSITIVE
  SECOND_NEGATIVE
}

enum GameType {
  NCV
  WOF
}

enum GameClassification {
  MATERIALISTIC
  TACTICAL
  DYNAMIC
  POSITIONAL
  STRATEGIC
  FORTUNE
}

enum GameStatus {
  ACCEPTED
  DECLINED
  PENDING_REPLY
  UNDER_REVIEW
}

enum UserRole {
  TESTER
  MEMBER
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  role       UserRole  @default(MEMBER)
  likedPosts Post[]    @relation("UserLikedPosts")
  comments   Comment[]
  voices     Voice[]
  posts      Post[]    @relation("UserPosts")
}

enum RuleType {
  GAMEPLAY
  TIMECONTROL
}

model GameRule {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  type  RuleType
  posts Post[]
}

model Post {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  likes        User[]       @relation("UserLikedPosts")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  gamerules    GameRule[]
  type         GameType
  status       GameStatus
  verdict      String?
  author       User         @relation("UserPosts", fields: [authorUserId], references: [id])
  authorUserId Int
  comments     Comment[]
  PostDetails  PostDetails?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  User      User     @relation(fields: [userId], references: [id])
  userId    Int

  Children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id Int?
}

model PostDetails {
  id                     Int                     @id @default(autoincrement())
  Post                   Post                    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId                 Int                     @unique 
  notes                  String?
  voices                 Voice[]
  gameClassification     GameClassification?
  gameplayClassification GameplayClassification?
}

model Voice {
  id       Int         @id @default(autoincrement())
  value    VoteValue
  tester   User        @relation(fields: [testerId], references: [id])
  post     PostDetails @relation(fields: [postId], references: [id])
  testerId Int
  postId   Int
  @@unique([testerId, postId])
}
