datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum VoteValue {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum GameplayClassification {
  FIRST_POSITIVE
  FIRST_NEGATIVE
  SECOND_POSITIVE
  SECOND_NEGATIVE
}

enum GameType {
  NCV
  WOF
}

enum GameClassification {
  MATERIALISTIC
  TACTICAL
  DYNAMIC
  POSITIONAL
  STRATEGIC
  FORTUNE
}

enum GameStatus {
  ACCEPTED
  DECLINED
  PENDING_REPLY
  UNDER_REVIEW
}

enum UserRole {
  TESTER
  MEMBER
}

model PostOnUserLikes {
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id])
  postId Int
  userId Int

  @@id([postId, userId])
}

model User {
  id             Int               @id @default(autoincrement())
  name           String
  email          String?
  role           UserRole          @default(MEMBER)
  comments       Comment[]
  voices         Voice[]
  posts          Post[]            @relation("UserPosts")
  UserLikedPosts PostOnUserLikes[]
}

model Post {
  id             Int               @id @default(autoincrement())
  gameNr         Int               @unique
  fen            String
  title          String
  description    String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  gamerules      GameRule[]
  type           GameType          @default(NCV)
  status         GameStatus
  verdict        String?
  author         User              @relation("UserPosts", fields: [authorUserId], references: [id])
  authorUserId   Int
  comments       Comment[]
  PostDetails    PostDetails?
  variantLink    String            @unique
  UserLikedPosts PostOnUserLikes[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  User      User     @relation(fields: [userId], references: [id])
  userId    Int

  Children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id Int?

  hidden Boolean @default(false)
}

model PostDetails {
  id                     Int                     @id @default(autoincrement())
  Post                   Post                    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId                 Int                     @unique
  notes                  String?
  voices                 Voice[]
  gameClassification     GameClassification?
  gameplayClassification GameplayClassification?
}

model Voice {
  id            Int         @id @default(autoincrement())
  value         VoteValue
  tester        User        @relation(fields: [testerId], references: [id])
  postDetails   PostDetails @relation(fields: [postDetailsId], references: [id], onDelete: Cascade)
  testerId      Int
  postDetailsId Int

  @@unique([testerId, postDetailsId])
}

model GameRule {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

// Passing | allowPassing | true
// Anonymous | anonymous | true
// Any Capture | anyCapture | true
// Atomic | atomic | true
// Bare Piece | barePieceLoses | true
// Blindfold | blindfold | true
// Regicide | captureTheKing | true
// Crazyhouse | crazyhouse | true
// Crazywan | crazywan | true
// DeadWall | deadWall | true
// Diplomacy | diplomacy | true
// Duck | duckChess | true
// Fatal | fatalCapture | true
// Fog | fogOfWar | true
// Points | gameOfPoints
// Ghost | ghostBoard | true
// Giveaway | giveaway | true
// KotH | koth | true или список координат типа f3,g5,h2,b8,b7
// N-check | nCheck | N или [N, N, N, N] ([3,7,5,5] группируется как 3-5-7)
// No Zombies | noDkw | true
// No EnP | noEnPassant | true
// No Opp Castling | oppositeSideCastling | true
// OxN | oppX | N
// Play for Mate | play4mate | true
// +N | pointsForMate | N
// =KDSD | promoteTo | список букв 
// Nth | promotionRank | N
// Seirawan | seirawanSetup | true
// Self Check | selfCheck | true
// Self Partner | selfPartner | true
// Semianon | semiAnonymous | true
// Setup | setup | N
// Sideways | sideways | true
// Stalemate ... | stalemate | Win or Lose
// Taboo | taboo | true
// Takeover | takeover | true
// Alt Teams (RB or RG) |  teammate | 1 or 3
// Torpedo | torpedo | true
