---
import { getAbsoluteUrl, refreshUserInfo, states } from 'utils/auth'
import { prisma } from 'db/prisma/prisma'
import { supabaseAdmin } from 'db/supabase/admin'

const code = Astro.url.searchParams.get('code')
const state = Astro.url.searchParams.get('state')

if (Astro.url.searchParams.has('error')) return Astro.redirect(getAbsoluteUrl(Astro.url, '/'))

if (!code || !state || !states.has(state)) return Astro.redirect(getAbsoluteUrl(Astro.url, '/login'))

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const { codeVerifier } = states.get(state)!

const [userInfo, signature, exists] = await refreshUserInfo(
  {
    grant_type: 'authorization_code',
    client_id: import.meta.env.OAUTH_CLIENT_ID,
    redirect_uri: getAbsoluteUrl(Astro.url, '/callback'),
    code,
    code_verifier: codeVerifier
  },
  Astro.cookies
)
if (!userInfo) return Astro.redirect(getAbsoluteUrl(Astro.url, '/'))

if (!exists) {
  const newUser = await supabaseAdmin.createUser({
    email: `${userInfo.id}@variants.world`,
    password: signature,
    email_confirm: true
  })
  const uuid = newUser.data.user?.id
  if (!uuid) {
    Astro.cookies.delete('token')
    Astro.cookies.delete('expires')
    console.log(newUser.error)
    return new Response(JSON.stringify(newUser.error), { status: 403 })
  }
  await prisma.user.create({ data: { ...userInfo, uuid } })
  console.log('User created!')
} else {
  const { id, ...data } = userInfo
  const { data: existInSupabaseAuth } = await supabaseAdmin.getUserById(exists.uuid)

  if (existInSupabaseAuth.user) {
    await Promise.all([
      prisma.user.update({ data: { ...data, uuid: exists.uuid }, where: { id } }),
      supabaseAdmin.updateUserById(exists.uuid, {
        email: `${id}@variants.world`,
        password: signature
      })
    ])
    console.log('User updated!')
  } else {
    const {data: userInSupabaseAuth} = await supabaseAdmin.createUser({
        email: `${userInfo.id}@variants.world`,
        password: signature,
        email_confirm: true
      })

    if (userInSupabaseAuth.user) {
      await prisma.user.update({ data: { ...userInfo, uuid: userInSupabaseAuth.user.id }, where: { id } })
    }
    console.log('User founded, but created in supa!')
  }
}

return Astro.redirect('/')
---
