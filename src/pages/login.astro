---
import { TokenPayload, myJWTVerifyAsync, refreshUserInfo, states } from 'utils/auth'
import { ulid } from 'ulidx'
// import { z } from 'astro/zod'
import { prisma } from 'db/prisma/prisma'
import shajs from 'sha.js'

const token = Astro.cookies.get('token')?.value
const expires = Astro.cookies.get('expires')?.value

if (token && expires) {
  try {
    const tokenPayload = TokenPayload.parse(await myJWTVerifyAsync(token))
    const user = await prisma.user.findFirst({where: { id: tokenPayload.id }, select: {id: true, refreshToken: true}})

    if (user && user.refreshToken) {
      if (new Date(expires) < new Date()) {
        const [userInfo] = await refreshUserInfo({
          grant_type: 'refresh_token',
          client_id: import.meta.env.OAUTH_CLIENT_ID,
          redirect_uri: 'http://localhost:3000/callback',
          code: user.refreshToken,
        }, Astro.cookies)
        
        if (!userInfo) return new Response(null, { status: 403 })
        
        const { id, ...data } = userInfo
        prisma.user.update({ where: { id }, data })
      }

      return Astro.redirect(`/`)
    }
  } catch {
    // Invalid token, retrieve new one
  }
}

// ulid ~ 01F7DKCVCVDZN1Z5Q4FWANHHCC 
const codeVerifier = ulid() + ulid() + ulid()
const codeChallenge = shajs('sha256').update(codeVerifier).digest('base64url')
const state = ulid()

states.set(state, { codeChallenge, codeVerifier })

const params = new URLSearchParams({
  client_id: import.meta.env.OAUTH_CLIENT_ID,
  redirect_uri: import.meta.env.OAUTH_CALLBACK,
  response_type: 'code',
  scope: 'openid profile',
  state,
  code_challenge: codeChallenge,
  code_challenge_method: 'S256'
})
return Astro.redirect(`https://oauth.chess.com/authorize?${params}`)

---
