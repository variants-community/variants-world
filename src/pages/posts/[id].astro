---
import { getPostById } from 'db/prisma/queries'
import AdminSettings from 'components/AdminSettings'
import BackButton from 'components/BackButton'
import Comments from 'components/comments'
import GameInfo from 'components/GameInfo'
import GamePicture from 'components/GamePicture'
import GameStatusCard from 'components/GameStatusCard'
import GuestPostDetails from 'components/guest/guest-post'
import Layout from 'layouts/Layout.astro'
import PresentUsers from 'components/presence/PresentUsers'

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const postId = parseInt(Astro.params.id!)

const { user } = Astro.locals
const post = await getPostById(postId)

const userIsTester = user.role === 'TESTER'
const userIsAuthor = user.id === post?.author.id

const title = `${post ? `${post.type}: ${post.title}` : 'Not found'}`
const ogImage =
  post && `https://og.variants.world/?type=${post.type}&title=${post.title}&status=${post.status}&fen=${encodeURIComponent(post.fen)}`
---

<Layout title={title} ogImage={ogImage}>
  {
    post ? (
      user.guest ? (
        <GuestPostDetails postId={post.id} type={post.type} title={post.title} fen={post.fen} />
      ) : (
        <section class="container mx-auto">
          <div
            id="card"
            class="flex flex-col mx-auto sm:mx-0 w-11/12 lg:w-auto sm:(w-125 mx-auto) mb-[40px] gap-[17px]"
          >
            <div class={'flex flex-row items-center h-8'}>
              <BackButton value="Back to all posts" href="/posts" client:load />
              {post.PostDetails && <PresentUsers postId={post.id} user={user} client:idle />}
            </div>
            <div class="flex lg:flex-row  flex-col gap-[10px]">
              <GamePicture postId={post.id} userId={user.id} fen={post.fen} likes={post.UserLikedPosts} client:load />
              <GameInfo
                postId={post.id}
                title={post.title}
                type={post.type}
                rules={post.gamerules.map(rule => rule.name)}
                username={post.author.username}
                isUserLocked={!!post.author.lockedUntil}
                profileUrl={post.author.profileUrl}
                createdAt={post.createdAt}
                description={post.description}
                gameNr={post.gameNr}
                gameNrs={post.gameNrs}
                displayEditBotton={userIsTester || userIsAuthor}
                client:load={userIsTester || userIsAuthor}
              />
            </div>

            {post.PostDetails &&
              userIsTester &&
              (import.meta.env.DEV ? (
                <AdminSettings testerId={user.id} details={post.PostDetails} client:load />
              ) : (
                <AdminSettings testerId={user.id} details={post.PostDetails} client:only='preact'>
                  <AdminSettings details={post.PostDetails} slot='fallback' />
                </AdminSettings>
              ))}
            {userIsTester ? (
              <GameStatusCard
                displayEditBotton
                postId={post.id}
                verdict={post.verdict}
                status={post.status}
                client:load
              />
            ) : (
              <GameStatusCard postId={post.id} verdict={post.verdict} status={post.status} />
            )}
          </div>
          <Comments
            isUserTester={userIsTester}
            userId={user.id}
            postId={post.id}
            comments={post.comments}
            client:visible
          />
        </section>
      )
    ) : (
      <div>Not Found</div>
    )
  }
</Layout>

<style lang="sass" is:global>
  @keyframes new
    from
      opacity: 0
      transform: translateY(2rem)
    to
      opacity: 1
      transform: translateY(0rem)

  $sections: (0 gameinfo) (1 admin) (2 status) (1 likes)

  @each $delay, $property in $sections
    ::view-transition-new(card-#{$property})
      animation: 300ms + ($delay * 100ms) ease new
</style>
