---
import { getPostById } from "db/prisma/queries"
import { getUser } from "db/supabase/auth"
import AdminSettings from "components/AdminSettings"
import Comments from "components/Comments"
import GameInfo from "components/GameInfo"
import GamePicture from "components/GamePicture"
import GameStatusCard from "components/GameStatusCard"
import Layout from "layouts/Layout.astro"
import Navigation from "components/Navigation"
import Presence from "components/Presence"

// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
const postId = parseInt(Astro.params.id!)

const [user, post] = await Promise.all([getUser(Astro.request), getPostById(postId)])

if (!user) {
  return Astro.redirect("/auth")
}

const userIsTester = user.role === "TESTER"
const userIsAuthor = user.id === post?.author.id

---

<Layout>
  <Navigation username={user.username} />
  {
    post && (
      <section class="">
        <div class="mx-auto sm:mx-0 w-11/12 lg:w-auto sm:(w-[500px] mx-auto) flex flex-col mb-[40px] gap-[17px]">
          <div class="flex lg:flex-row  flex-col gap-[10px]">
            <GamePicture
              postId={post.id}
              userId={user.id}
              likes={post.UserLikedPosts}
              client:load
            />
            {userIsTester || userIsAuthor ? (
              <GameInfo
                displayEditBotton
                postId={post.id}
                title={post.title}
                type={post.type}
                rules={["3min", "Points", "5-check", "8th=QBRN"]}
                rules={post.gamerules.map((rule) => rule.name)}
                user={post.author.name}
                createdAt={post.createdAt}
                description={post.description}
                variantLink={`/${post.id}`}
                client:load
              />
            ) : (
              <GameInfo
                postId={post.id}
                title={post.title}
                type={post.type}
                rules={["3min", "Points", "5-check", "8th=QBRN"]}
                rules={post.gamerules.map((rule) => rule.name)}
                user={post.author.name}
                createdAt={post.createdAt}
                description={post.description}
                variantLink={`${post.variantLink}`}
              />
            )}
          </div>

          {post.PostDetails && userIsTester && (
            <Presence postId={post.id} user={user} client:idle />
            <AdminSettings user={user} details={post.PostDetails} client:load />
          )}
          {userIsTester ? (
            <GameStatusCard
              displayEditBotton
              postId={post.id}
              verdict={post.verdict}
              status={post.status}
              client:load
            />
          ) : (
            <GameStatusCard
              postId={post.id}
              verdict={post.verdict}
              status={post.status}
            />
          )}
        </div>
        <Comments isUserTester={userIsTester} userId={user.id} postId={post.id} comments={post.comments} client:visible />
      </section>
    )
  }
</Layout>
